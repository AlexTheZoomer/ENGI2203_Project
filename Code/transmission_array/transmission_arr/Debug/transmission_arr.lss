
transmission_arr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800140  00800140  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fe  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000662  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000231  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d5  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b1  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupTimer0>:
};

volatile uint8_t sine_index = 0;

void setupTimer0() {
	DDRD |= (1 << PORTD5); // PD5 sine output
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << WGM00) | (1 << WGM01) | (1 << COM0B1); // fast PWM
  ac:	83 e2       	ldi	r24, 0x23	; 35
  ae:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02) | (1 << CS00) | (1 << CS01);   // prescaler 64
  b0:	8b e0       	ldi	r24, 0x0B	; 11
  b2:	85 bd       	out	0x25, r24	; 37
	OCR0A = TOP_1k; // setting pwm period
  b4:	82 e3       	ldi	r24, 0x32	; 50
  b6:	87 bd       	out	0x27, r24	; 39
	OCR0B = sine_table[sine_index]; // setting initial duty cycle
  b8:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__data_end>
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	e0 50       	subi	r30, 0x00	; 0
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	80 81       	ld	r24, Z
  c4:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (1 << TOIE0); // enabling timer0 interrupt
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  cc:	08 95       	ret

000000ce <__vector_16>:
}

ISR(TIMER0_OVF_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	sine_index = (sine_index + 1) % SINE_TABLE_SIZE; // Loop sine wave index
  ec:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	8f 73       	andi	r24, 0x3F	; 63
  f6:	90 78       	andi	r25, 0x80	; 128
  f8:	99 23       	and	r25, r25
  fa:	24 f4       	brge	.+8      	; 0x104 <__vector_16+0x36>
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	80 6c       	ori	r24, 0xC0	; 192
 100:	9f 6f       	ori	r25, 0xFF	; 255
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	OCR0B = (sine_table[sine_index] * TOP_1k) / 100; // Scale duty cycle correctly
 108:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__data_end>
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	80 81       	ld	r24, Z
 114:	22 e3       	ldi	r18, 0x32	; 50
 116:	82 9f       	mul	r24, r18
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	64 e6       	ldi	r22, 0x64	; 100
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 a6 00 	call	0x14c	; 0x14c <__divmodhi4>
 124:	68 bd       	out	0x28, r22	; 40
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:

int main() {
	setupTimer0();
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer0>
	sei(); // turning on global interupts
 148:	78 94       	sei
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x6>

0000014c <__divmodhi4>:
 14c:	97 fb       	bst	r25, 7
 14e:	07 2e       	mov	r0, r23
 150:	16 f4       	brtc	.+4      	; 0x156 <__divmodhi4+0xa>
 152:	00 94       	com	r0
 154:	07 d0       	rcall	.+14     	; 0x164 <__divmodhi4_neg1>
 156:	77 fd       	sbrc	r23, 7
 158:	09 d0       	rcall	.+18     	; 0x16c <__divmodhi4_neg2>
 15a:	0e 94 ba 00 	call	0x174	; 0x174 <__udivmodhi4>
 15e:	07 fc       	sbrc	r0, 7
 160:	05 d0       	rcall	.+10     	; 0x16c <__divmodhi4_neg2>
 162:	3e f4       	brtc	.+14     	; 0x172 <__divmodhi4_exit>

00000164 <__divmodhi4_neg1>:
 164:	90 95       	com	r25
 166:	81 95       	neg	r24
 168:	9f 4f       	sbci	r25, 0xFF	; 255
 16a:	08 95       	ret

0000016c <__divmodhi4_neg2>:
 16c:	70 95       	com	r23
 16e:	61 95       	neg	r22
 170:	7f 4f       	sbci	r23, 0xFF	; 255

00000172 <__divmodhi4_exit>:
 172:	08 95       	ret

00000174 <__udivmodhi4>:
 174:	aa 1b       	sub	r26, r26
 176:	bb 1b       	sub	r27, r27
 178:	51 e1       	ldi	r21, 0x11	; 17
 17a:	07 c0       	rjmp	.+14     	; 0x18a <__udivmodhi4_ep>

0000017c <__udivmodhi4_loop>:
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	a6 17       	cp	r26, r22
 182:	b7 07       	cpc	r27, r23
 184:	10 f0       	brcs	.+4      	; 0x18a <__udivmodhi4_ep>
 186:	a6 1b       	sub	r26, r22
 188:	b7 0b       	sbc	r27, r23

0000018a <__udivmodhi4_ep>:
 18a:	88 1f       	adc	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	5a 95       	dec	r21
 190:	a9 f7       	brne	.-22     	; 0x17c <__udivmodhi4_loop>
 192:	80 95       	com	r24
 194:	90 95       	com	r25
 196:	bc 01       	movw	r22, r24
 198:	cd 01       	movw	r24, r26
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
