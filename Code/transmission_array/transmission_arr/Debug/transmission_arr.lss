
transmission_arr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800150  00800150  00000324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083c  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ca  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033f  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  9e:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupTimer0>:
volatile uint8_t current_bit = 0;
volatile uint8_t transmission_active = 0;
volatile uint8_t message[16] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}; // bit sequence

void setupTimer0() {
	DDRD |= (1 << PORTD5); // PD5 sine output
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << WGM00) | (1 << WGM01) | (1 << COM0B1); // Fast PWM
  ac:	83 e2       	ldi	r24, 0x23	; 35
  ae:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02) | (1 << CS00) | (1 << CS01);   // Prescaler 64
  b0:	8b e0       	ldi	r24, 0x0B	; 11
  b2:	85 bd       	out	0x25, r24	; 37
	OCR0A = TOP_default; // 
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	87 bd       	out	0x27, r24	; 39
	OCR0B = sine_table[sine_index]; 
  b8:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <sine_index>
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	e0 5f       	subi	r30, 0xF0	; 240
  c0:	fe 4f       	sbci	r31, 0xFE	; 254
  c2:	80 81       	ld	r24, Z
  c4:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (1 << TOIE0); 
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  cc:	08 95       	ret

000000ce <setupTimer1>:
}

void setupTimer1() {
	// bit transmission timing 
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); 
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 5000; // transmission interval
  d4:	88 e8       	ldi	r24, 0x88	; 136
  d6:	93 e1       	ldi	r25, 0x13	; 19
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); 
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  e6:	08 95       	ret

000000e8 <__vector_16>:
}

ISR(TIMER0_OVF_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	sine_index = (sine_index + 1) % SINE_TABLE_SIZE;
 104:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sine_index>
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	8f 73       	andi	r24, 0x3F	; 63
 10e:	90 78       	andi	r25, 0x80	; 128
 110:	99 23       	and	r25, r25
 112:	24 f4       	brge	.+8      	; 0x11c <__vector_16+0x34>
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	80 6c       	ori	r24, 0xC0	; 192
 118:	9f 6f       	ori	r25, 0xFF	; 255
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <sine_index>
	OCR0B = (sine_table[sine_index] * OCR0A) / 100; 
 120:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <sine_index>
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e0 5f       	subi	r30, 0xF0	; 240
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	80 81       	ld	r24, Z
 12c:	97 b5       	in	r25, 0x27	; 39
 12e:	89 9f       	mul	r24, r25
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	64 e6       	ldi	r22, 0x64	; 100
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__divmodhi4>
 13c:	68 bd       	out	0x28, r22	; 40
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	if (transmission_active) {
 16a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 16e:	88 23       	and	r24, r24
 170:	f1 f0       	breq	.+60     	; 0x1ae <__vector_11+0x54>
		if (bit_index < 16) {
 172:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <bit_index>
 176:	80 31       	cpi	r24, 0x10	; 16
 178:	b0 f4       	brcc	.+44     	; 0x1a6 <__vector_11+0x4c>
			current_bit = message[bit_index];
 17a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <bit_index>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <current_bit>
			OCR0A = current_bit ? TOP_high : TOP_low;
 18a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current_bit>
 18e:	88 23       	and	r24, r24
 190:	11 f0       	breq	.+4      	; 0x196 <__vector_11+0x3c>
 192:	88 ec       	ldi	r24, 0xC8	; 200
 194:	01 c0       	rjmp	.+2      	; 0x198 <__vector_11+0x3e>
 196:	83 e2       	ldi	r24, 0x23	; 35
 198:	87 bd       	out	0x27, r24	; 39
			bit_index++;
 19a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <bit_index>
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <bit_index>
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <__vector_11+0x54>
			} else {
			transmission_active = 0; // Stop transmission
 1a6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
			OCR0A = TOP_default;
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	87 bd       	out	0x27, r24	; 39
		}
	}
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <startTransmission>:

void startTransmission() {
	bit_index = 0;
 1be:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <bit_index>
	transmission_active = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
 1c8:	08 95       	ret

000001ca <main>:
}

int main() {
	setupTimer0();
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer0>
	setupTimer1();
 1ce:	0e 94 67 00 	call	0xce	; 0xce <setupTimer1>
	sei(); // Enable global interrupts
 1d2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	89 e6       	ldi	r24, 0x69	; 105
 1d8:	98 e1       	ldi	r25, 0x18	; 24
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x10>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x1a>
 1e4:	00 00       	nop
	
	_delay_ms(500);
	startTransmission();
 1e6:	0e 94 df 00 	call	0x1be	; 0x1be <startTransmission>
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <main+0x20>

000001ec <__divmodhi4>:
 1ec:	97 fb       	bst	r25, 7
 1ee:	07 2e       	mov	r0, r23
 1f0:	16 f4       	brtc	.+4      	; 0x1f6 <__divmodhi4+0xa>
 1f2:	00 94       	com	r0
 1f4:	07 d0       	rcall	.+14     	; 0x204 <__divmodhi4_neg1>
 1f6:	77 fd       	sbrc	r23, 7
 1f8:	09 d0       	rcall	.+18     	; 0x20c <__divmodhi4_neg2>
 1fa:	0e 94 0a 01 	call	0x214	; 0x214 <__udivmodhi4>
 1fe:	07 fc       	sbrc	r0, 7
 200:	05 d0       	rcall	.+10     	; 0x20c <__divmodhi4_neg2>
 202:	3e f4       	brtc	.+14     	; 0x212 <__divmodhi4_exit>

00000204 <__divmodhi4_neg1>:
 204:	90 95       	com	r25
 206:	81 95       	neg	r24
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	08 95       	ret

0000020c <__divmodhi4_neg2>:
 20c:	70 95       	com	r23
 20e:	61 95       	neg	r22
 210:	7f 4f       	sbci	r23, 0xFF	; 255

00000212 <__divmodhi4_exit>:
 212:	08 95       	ret

00000214 <__udivmodhi4>:
 214:	aa 1b       	sub	r26, r26
 216:	bb 1b       	sub	r27, r27
 218:	51 e1       	ldi	r21, 0x11	; 17
 21a:	07 c0       	rjmp	.+14     	; 0x22a <__udivmodhi4_ep>

0000021c <__udivmodhi4_loop>:
 21c:	aa 1f       	adc	r26, r26
 21e:	bb 1f       	adc	r27, r27
 220:	a6 17       	cp	r26, r22
 222:	b7 07       	cpc	r27, r23
 224:	10 f0       	brcs	.+4      	; 0x22a <__udivmodhi4_ep>
 226:	a6 1b       	sub	r26, r22
 228:	b7 0b       	sbc	r27, r23

0000022a <__udivmodhi4_ep>:
 22a:	88 1f       	adc	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	5a 95       	dec	r21
 230:	a9 f7       	brne	.-22     	; 0x21c <__udivmodhi4_loop>
 232:	80 95       	com	r24
 234:	90 95       	com	r25
 236:	bc 01       	movw	r22, r24
 238:	cd 01       	movw	r24, r26
 23a:	08 95       	ret

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
